//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""ShapeMontion"",
            ""id"": ""4a17c24b-831b-49eb-8e11-1b5e5f7bb1d4"",
            ""actions"": [
                {
                    ""name"": ""StartMon"",
                    ""type"": ""Button"",
                    ""id"": ""5383e5a0-ce66-4275-852a-bf8f3076838f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopMon"",
                    ""type"": ""Button"",
                    ""id"": ""40872383-6da9-4fc1-9bed-667774ba2339"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c96b4d51-4d00-4946-b60d-2524837a3abe"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartMon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9bf50c4c-8ca7-4088-a9c8-61d2eb060947"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopMon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ShapeMontion
        m_ShapeMontion = asset.FindActionMap("ShapeMontion", throwIfNotFound: true);
        m_ShapeMontion_StartMon = m_ShapeMontion.FindAction("StartMon", throwIfNotFound: true);
        m_ShapeMontion_StopMon = m_ShapeMontion.FindAction("StopMon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ShapeMontion
    private readonly InputActionMap m_ShapeMontion;
    private IShapeMontionActions m_ShapeMontionActionsCallbackInterface;
    private readonly InputAction m_ShapeMontion_StartMon;
    private readonly InputAction m_ShapeMontion_StopMon;
    public struct ShapeMontionActions
    {
        private @Controls m_Wrapper;
        public ShapeMontionActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartMon => m_Wrapper.m_ShapeMontion_StartMon;
        public InputAction @StopMon => m_Wrapper.m_ShapeMontion_StopMon;
        public InputActionMap Get() { return m_Wrapper.m_ShapeMontion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShapeMontionActions set) { return set.Get(); }
        public void SetCallbacks(IShapeMontionActions instance)
        {
            if (m_Wrapper.m_ShapeMontionActionsCallbackInterface != null)
            {
                @StartMon.started -= m_Wrapper.m_ShapeMontionActionsCallbackInterface.OnStartMon;
                @StartMon.performed -= m_Wrapper.m_ShapeMontionActionsCallbackInterface.OnStartMon;
                @StartMon.canceled -= m_Wrapper.m_ShapeMontionActionsCallbackInterface.OnStartMon;
                @StopMon.started -= m_Wrapper.m_ShapeMontionActionsCallbackInterface.OnStopMon;
                @StopMon.performed -= m_Wrapper.m_ShapeMontionActionsCallbackInterface.OnStopMon;
                @StopMon.canceled -= m_Wrapper.m_ShapeMontionActionsCallbackInterface.OnStopMon;
            }
            m_Wrapper.m_ShapeMontionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartMon.started += instance.OnStartMon;
                @StartMon.performed += instance.OnStartMon;
                @StartMon.canceled += instance.OnStartMon;
                @StopMon.started += instance.OnStopMon;
                @StopMon.performed += instance.OnStopMon;
                @StopMon.canceled += instance.OnStopMon;
            }
        }
    }
    public ShapeMontionActions @ShapeMontion => new ShapeMontionActions(this);
    public interface IShapeMontionActions
    {
        void OnStartMon(InputAction.CallbackContext context);
        void OnStopMon(InputAction.CallbackContext context);
    }
}
